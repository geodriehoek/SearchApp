BEZIG:   - placeholder-methods vervangen
            -> REST design afwerken

    FIX/OPTIMALISATIE:
    ------------------
        - manier vinden om in service id te onthouden, zodat deze niet steeds moet searchen via grp_id
        - verwijderen Product.id -> alles via grp_id: business-id == _id
            -> VRAAG PHILLIPE:
                - in reÃ«le gevallen, gebruikmaken van db-id? of business-id? => verschil tussen GET en SEARCH
                - na verwijderen van Product.id en voor herindexeren dataset:
                    => ObjectMapper exceptions omtrent fields niet aanwezig
                        -> waarom? geen probleem wanneer ik in Klasse extra velden toevoegde die niet in db staan
                                   wel als er in db meer velden staan dan in Klasse
                - welke HttpResponseCodes returnen? liever geen 500? of net wel
        - "If there is a version conflict, an ElasticsearchException will be thrown:
                         ----------------
           try {
               DeleteRequest request = new DeleteRequest("posts", "doc", "1").version(2);
               DeleteResponse deleteResponse = client.delete(request);
           } catch (ElasticsearchException exception) {
               if (exception.status() == RestStatus.CONFLICT) {

               }
           }"
            -> moet ik catchen??


TODO:   - exceptioncatching en logging optimaliseren
            -> algemene exceptions algemeen opvangen?
                -> bvb: RepositoryException
                    -> https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#simplemappingexceptionresolver
                        of
                    -> https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#using-controlleradvice-classes
                        -> enkel statische pagina's => return "repository-error.html";
            -> aspect voor logging? en Exception-info meesturen?
                -> aspect dat exception onderschept en bundelt in Object(returnUrl, status, message)
            -> REST
                -> https://spring.io/blog/2013/11/01/exception-handling-in-spring-mvc#errors-and-rest
        - validation : new-product.html
        - index from file?
        - suggesters (mapping van products-dataset ondersteunt dit nog niet)
            => mappings
        - ajax facets/suggestion
        (- search From/Size impl)
              => momenteel nog compleet onafhankelijk van limiet van results/ waar checken?
                   -> "A field with one unique value per document should be used as the tiebreaker of the sort specification.
                       Otherwise the sort order for documents that have the same sort values would be undefined.
                       The recommended way is to use the field _id which is certain to contain one unique value for each document."
                       https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-search-after.html
                   -> alternatief search_after (gelijkaardig aan scroll, doch stateless)


BUGS
----------
    - resultList -> details of one -> update this one -> return to resultList => placing of updated one changes
        -> only first change??




FIXES:
    - Elasticsearch exception [type=cluster_block_exception, reason=blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];]
        PUT your_index_name/_settings
          {"index": {"blocks": {"read_only_allow_delete": "false"}}}